<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Author: John Spray <jcspray@icculus.org>
 Copyright (C) 2004, 2005, 2006 John Spray <jcs116@york.ac.uk>
 Copyright (C) 2005 Jerry DeLisle <jvdelisle@verizon.net>
 Copyright (C) 2020-2021 Han Tang <htang2@alaska.edu>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, see <http://www.gnu.org/licenses/>.

-->
<language id="fortran" name="Modern Fortran" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/x-fortran</property>
    <property name="globs">*.f;*.f77;*.f90;*.f95;*.f03;*.f08;*.f18;*.fypp;*.fpp</property>
    <property name="line-comment-start">!</property>
  </metadata>

  <styles>
    <!-- Comment group -->
    <style id="comment"             name="Comment"                    map-to="def:comment"/>
    <style id="ftn-mod"             name="Fortran Intrinsic Modules"  map-to="def:shebang"/>
    <!-- Constant group -->
    <style id="constant"            name="Constant"                   map-to="def:constant"/>
    <style id="character"           name="Character"                  map-to="def:character"/>
    <style id="special-chr"         name="Special Character"          map-to="def:special-char"/>
    <style id="float"               name="Floating Point Number"      map-to="def:floating-point"/>
    <style id="decimal"             name="Decimal"                    map-to="def:decimal"/>
    <style id="boz-literal"         name="Base-N Number"              map-to="def:base-n-integer"/>
    <style id="complex"             name="Complex Number"             map-to="def:complex"/>
    <style id="boolean"             name="Boolean Value"              map-to="def:boolean"/>
    <!-- Identifier group -->
    <style id="identifier"          name="Identifier"                 map-to="def:identifier"/>
    <style id="function"            name="Function"                   map-to="def:function"/>
    <style id="builtin"             name="Built-in Identifier"        map-to="def:builtin"/>
    <style id="scope"               name="Scope Unit"                 map-to="def:identifier"/>
    <!-- Statement group -->
    <style id="operator"            name="Operator"                   map-to="def:operator"/>
    <style id="keyword"             name="Keyword"                    map-to="def:keyword"/>
    <style id="io"                  name="IO"                         map-to="def:keyword"/>
    <!-- Type group -->
    <style id="type"                name="Data Type"                  map-to="def:type"/>
    <style id="attribute"           name="Fortran Attribute"          map-to="def:type"/>
    <!-- Others -->
    <style id="preprocessor"        name="Preprocessor"               map-to="def:preprocessor"/>
    <style id="preprocessor-inline" name="Preprocessor Inline"        map-to="def:preprocessor"/>
    <style id="error"               name="Error"                      map-to="def:error"/>
    <style id="warning"             name="Warning"                    map-to="def:warning"/>
    <style id="reserved"            name="Reserved Keyword"           map-to="def:reserved"/>
    <style id="note"                name="Note"                       map-to="def:note"/>
    <style id="net-address"         name="Net Address"                map-to="def:net-address"/>
  </styles>

  <definitions>
    <!-- Regex definitions -->
    <define-regex id="preproc-start">^#:</define-regex>

    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>

    <define-regex id="valid-fortran-name">
      [a-zA-Z][a-zA-Z0-9_]*
    </define-regex>

    <!-- Comment group -->
    <context id="comment" style-ref="comment">
      <start>\!</start>
      <end>$</end>
    </context>

    <context id="ftn-mod" style-ref="ftn-mod">
      <keyword>iso_fortran_env</keyword>
      <keyword>iso_c_binding</keyword>
      <keyword>ieee_exceptions</keyword>
      <keyword>ieee_arithmetic</keyword>
      <keyword>ieee_features</keyword>
      <keyword>omp_lib</keyword>
      <keyword>omp_lib_kinds</keyword>
      <keyword>openacc</keyword>
    </context>

    <context id="comment-group">
      <include>
        <context ref="comment"/>
        <context ref="ftn-mod"/>
      </include>
    </context>

    <!-- Constant group -->
    <context id="constant" style-ref="constant">
      <match>\b[A-Z][A-Z0-9_]*\b</match>
    </context>

    <context id="character" style-ref="character">
      <start>(L?"|L?')</start>
      <end>\%{1@start}</end>
      <include>
        <context id="escaped-character" style-ref="character">
          <match>\%{escaped-character}</match>
        </context>
      </include>
    </context>

    <context id="special-chr" style-ref="special-chr">
      <match>&amp;|\%|\/\/</match>
    </context>

    <context id="float" style-ref="float">
      <match extended="true">
        (?&lt;![\w\.])
        [+-]?
        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([ed][+-]?[0-9]*)? |
         ([0-9]+[ed][+-]?[0-9]*))
         ([_]([0-9]+|[a-z][\w_]*))?
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        [+-]? ([1-9][0-9]*|0)
        ([_]([0-9]+|[a-z][\w_]*))?
        (?![\w\.])
      </match>
    </context>

    <context id="boz-literal" style-ref="boz-literal">
      <match extended="true">
        \bb'[01]+'|\bb"[01]+"|
        \bo'[0-7]+'|\bo"[0-7]+"|
        \bz'[0-9a-f]+'|\bz"[0-9a-f]+"
      </match>
    </context>

    <context id="boolean" style-ref="boolean">
      <prefix>\.</prefix>
      <suffix>\.</suffix>
      <keyword>true</keyword>
      <keyword>false</keyword>
    </context>

    <context id="constant-group">
      <include>
        <context ref="constant"/>
        <context ref="character"/>
        <context ref="special-chr"/>
        <context ref="float"/>
        <context ref="decimal"/>
        <context ref="boz-literal"/>
        <context ref="boolean"/>
      </include>
    </context>

    <!-- Statement group -->
    <context id="operator">
      <include>
        <context id="legacy-operator" style-ref="operator">
          <prefix>\.</prefix>
          <suffix>\.</suffix>
          <keyword>and</keyword>
          <keyword>or</keyword>
          <keyword>not</keyword>
          <keyword>eqv</keyword>
          <keyword>neqv</keyword>
          <keyword>eq</keyword>
          <keyword>ne</keyword>
          <keyword>gt</keyword>
          <keyword>lt</keyword>
          <keyword>ge</keyword>
          <keyword>le</keyword>
        </context>

        <context id="modern-operator" style-ref="operator">
          <match>=&gt;|&gt;=|&lt;=|\/=|=|&gt;|&lt;|\+|\-|\*|\/|&#58;&#58;</match>
        </context>
      </include>
    </context>

    <context id="keyword" style-ref="keyword">
      <!-- FORTRAN77 -->
      <keyword>assign</keyword>
      <keyword>backspace</keyword>
      <keyword>block data</keyword>
      <keyword>call</keyword>
      <keyword>common</keyword>
      <keyword>continue</keyword>
      <keyword>data</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>else if</keyword>
      <keyword>end</keyword>
      <keyword>end file</keyword>
      <keyword>end if</keyword>
      <keyword>entry</keyword>
      <keyword>equivalence</keyword>
      <keyword>external</keyword>
      <keyword>format</keyword>
      <keyword>function</keyword>
      <keyword>go to</keyword>
      <keyword>if</keyword>
      <keyword>implicit none</keyword>
      <keyword>inquire</keyword>
      <keyword>intrinsic</keyword>
      <keyword>stop</keyword>
      <keyword>then</keyword>
      <!-- Fortran90 -->
      <keyword>allocate</keyword>
      <keyword>case</keyword>
      <keyword>cycle</keyword>
      <keyword>deallocate</keyword>
      <keyword>elsewhere</keyword>
      <keyword>exit</keyword>
      <keyword>namelist</keyword>
      <keyword>nullify</keyword>
      <keyword>only</keyword>
      <keyword>select</keyword>
      <keyword>sequence</keyword>
      <keyword>target</keyword>
      <keyword>use</keyword>
      <keyword>while</keyword>
      <keyword>where</keyword>
      <!-- Fortran2003 -->
      <keyword>associate</keyword>
      <keyword>asynchronous</keyword>
      <keyword>final</keyword>
      <keyword>flush</keyword>
      <keyword>wait</keyword>
      <!-- Fortran2008 -->
      <keyword>do concurrent</keyword>
      <keyword>error stop</keyword>
      <keyword>sync all</keyword>
      <keyword>sync images</keyword>
      <keyword>sync memory</keyword>
      <keyword>lock</keyword>
      <keyword>unlock</keyword>
    </context>

    <context id="io" style-ref="io">
      <keyword>close</keyword>
      <keyword>open</keyword>
      <keyword>print</keyword>
      <keyword>read</keyword>
      <keyword>rewind</keyword>
      <keyword>rewirte</keyword>
      <keyword>write</keyword>
      <keyword>include</keyword>
      <keyword>import</keyword>
    </context>

    <context id="statement-group">
      <include>
        <context ref="operator"/>
        <context ref="keyword"/>
        <context ref="io"/>
      </include>
    </context>

    <!-- Type group -->
    <context id="type" style-ref="type">
      <keyword>integer</keyword>
      <keyword>logical</keyword>
      <keyword>real</keyword>
      <keyword>complex</keyword>
      <keyword>double precision</keyword>
      <keyword>character</keyword>
      <keyword>procedure</keyword>
      <keyword>class</keyword>
      <keyword>final</keyword>
      <keyword>generic</keyword>
      <keyword>enumerator</keyword>
    </context>

    <context id="attribute" style-ref="attribute">
      <keyword>intent</keyword>
      <keyword>in</keyword>
      <keyword>out</keyword>
      <keyword>inout</keyword>
      <keyword>allocatable</keyword>
      <keyword>dimension</keyword>
      <keyword>pointer</keyword>
      <keyword>parameter</keyword>
      <keyword>optional</keyword>
      <keyword>abstract</keyword>
      <keyword>deferred</keyword>
      <keyword>extends</keyword>
      <keyword>non_overridable</keyword>
      <keyword>nopass</keyword>
      <keyword>pass</keyword>
      <keyword>protected</keyword>
      <keyword>value</keyword>
      <keyword>volatile</keyword>
      <keyword>public</keyword>
      <keyword>private</keyword>
      <keyword>save</keyword>
      <keyword>codimension</keyword>
      <keyword>contiguous</keyword>
    </context>

    <context id="type-group">
      <include>
        <context ref="type"/>
        <context ref="attribute"/>
      </include>
    </context>

    <!-- Identifier group -->
    <context id="identifier" style-ref="identifier">
      <match>\%{valid-fortran-name}</match>
    </context>

    <context id="function" style-ref="function">
      <keyword>function</keyword>
      <keyword>end function</keyword>
      <keyword>result</keyword>
      <keyword>subroutine</keyword>
      <keyword>end subroutine</keyword>
      <keyword>interface</keyword>
      <keyword>end interface</keyword>
      <keyword>return</keyword>
      <keyword>recursive</keyword>
      <keyword>elemental</keyword>
      <keyword>forall</keyword>
      <keyword>pure</keyword>
      <keyword>bind</keyword>
    </context>

    <context id="builtin" style-ref="builtin">
      <keyword>abort</keyword>
      <keyword>abs</keyword>
      <keyword>access</keyword>
      <keyword>achar</keyword>
      <keyword>acos</keyword>
      <keyword>acosd</keyword>
      <keyword>acosh</keyword>
      <keyword>adjustl</keyword>
      <keyword>adjustr</keyword>
      <keyword>aimag</keyword>
      <keyword>aint</keyword>
      <keyword>alarm</keyword>
      <keyword>all</keyword>
      <keyword>allocated</keyword>
      <keyword>and</keyword>
      <keyword>anint</keyword>
      <keyword>any</keyword>
      <keyword>asin</keyword>
      <keyword>asind</keyword>
      <keyword>asinh</keyword>
      <keyword>associated</keyword>
      <keyword>atan</keyword>
      <keyword>atand</keyword>
      <keyword>atan2</keyword>
      <keyword>atan2d</keyword>
      <keyword>atanh</keyword>
      <keyword>atomic_add</keyword>
      <keyword>atomic_and</keyword>
      <keyword>atomic_cas</keyword>
      <keyword>atomic_define</keyword>
      <keyword>atomic_fetch_add</keyword>
      <keyword>atomic_fetch_and</keyword>
      <keyword>atomic_fetch_or</keyword>
      <keyword>atomic_fetch_xor</keyword>
      <keyword>atomic_or</keyword>
      <keyword>atomic_ref</keyword>
      <keyword>atomic_xor</keyword>
      <keyword>backtrace</keyword>
      <keyword>bessel_j0</keyword>
      <keyword>bessel_j1</keyword>
      <keyword>bessel_jn</keyword>
      <keyword>bessel_y0</keyword>
      <keyword>bessel_y1</keyword>
      <keyword>bessel_yn</keyword>
      <keyword>bge</keyword>
      <keyword>bgt</keyword>
      <keyword>bit_size</keyword>
      <keyword>ble</keyword>
      <keyword>blt</keyword>
      <keyword>btest</keyword>
      <keyword>c_associated</keyword>
      <keyword>c_f_pointer</keyword>
      <keyword>c_f_procpointer</keyword>
      <keyword>c_funloc</keyword>
      <keyword>c_loc</keyword>
      <keyword>c_sizeof</keyword>
      <keyword>ceiling</keyword>
      <keyword>char</keyword>
      <keyword>chdir</keyword>
      <keyword>chmod</keyword>
      <keyword>cmplx</keyword>
      <keyword>co_broadcast</keyword>
      <keyword>co_max</keyword>
      <keyword>co_min</keyword>
      <keyword>co_reduce</keyword>
      <keyword>co_sum</keyword>
      <keyword>command_argument_count</keyword>
      <keyword>compiler_options</keyword>
      <keyword>compiler_version</keyword>
      <!-- <keyword>complex</keyword> -->
      <keyword>conjg</keyword>
      <keyword>cos</keyword>
      <keyword>cosd</keyword>
      <keyword>cosh</keyword>
      <keyword>cotan</keyword>
      <keyword>cotand</keyword>
      <keyword>count</keyword>
      <keyword>cpu_time</keyword>
      <keyword>cshift</keyword>
      <keyword>ctime</keyword>
      <keyword>date_and_time</keyword>
      <keyword>dble</keyword>
      <keyword>dcmplx</keyword>
      <keyword>digits</keyword>
      <keyword>dim</keyword>
      <keyword>dot_product</keyword>
      <keyword>dprod</keyword>
      <keyword>dreal</keyword>
      <keyword>dshiftl</keyword>
      <keyword>dshiftr</keyword>
      <keyword>dtime</keyword>
      <keyword>eoshift</keyword>
      <keyword>epsilon</keyword>
      <keyword>erf</keyword>
      <keyword>erfc</keyword>
      <keyword>erfc_scaled</keyword>
      <keyword>etime</keyword>
      <keyword>event_query</keyword>
      <keyword>execute_command_line</keyword>
      <!-- <keyword>exit</keyword> -->
      <keyword>exp</keyword>
      <keyword>exponent</keyword>
      <keyword>extends_type_of</keyword>
      <keyword>fdate</keyword>
      <keyword>fget</keyword>
      <keyword>fgetc</keyword>
      <keyword>findloc</keyword>
      <keyword>floor</keyword>
      <keyword>flush</keyword>
      <keyword>fnum</keyword>
      <keyword>fput</keyword>
      <keyword>fputc</keyword>
      <keyword>fraction</keyword>
      <keyword>free</keyword>
      <keyword>fseek</keyword>
      <keyword>fstat</keyword>
      <keyword>ftell</keyword>
      <keyword>gamma</keyword>
      <keyword>gerror</keyword>
      <keyword>getarg</keyword>
      <keyword>get_command</keyword>
      <keyword>get_command_argument</keyword>
      <keyword>getcwd</keyword>
      <keyword>getenv</keyword>
      <keyword>get_environment_variable</keyword>
      <keyword>getgid</keyword>
      <keyword>getlog</keyword>
      <keyword>getpid</keyword>
      <keyword>getuid</keyword>
      <keyword>gmtime</keyword>
      <keyword>hostnm</keyword>
      <keyword>huge</keyword>
      <keyword>hypot</keyword>
      <keyword>iachar</keyword>
      <keyword>iall</keyword>
      <keyword>iand</keyword>
      <keyword>iany</keyword>
      <keyword>iargc</keyword>
      <keyword>ibclr</keyword>
      <keyword>ibits</keyword>
      <keyword>ibset</keyword>
      <keyword>ichar</keyword>
      <keyword>idate</keyword>
      <keyword>ieor</keyword>
      <keyword>ierrno</keyword>
      <keyword>image_index</keyword>
      <keyword>index</keyword>
      <keyword>int</keyword>
      <keyword>int2</keyword>
      <keyword>int8</keyword>
      <keyword>ior</keyword>
      <keyword>iparity</keyword>
      <keyword>irand</keyword>
      <keyword>is_contiguous</keyword>
      <keyword>is_iostat_end</keyword>
      <keyword>is_iostat_eor</keyword>
      <keyword>isatty</keyword>
      <keyword>ishft</keyword>
      <keyword>ishftc</keyword>
      <keyword>isnan</keyword>
      <keyword>itime</keyword>
      <keyword>kill</keyword>
      <keyword>kind</keyword>
      <keyword>lbound</keyword>
      <keyword>lcobound</keyword>
      <keyword>leadz</keyword>
      <keyword>len</keyword>
      <keyword>len_trim</keyword>
      <keyword>lge</keyword>
      <keyword>lgt</keyword>
      <keyword>link</keyword>
      <keyword>lle</keyword>
      <keyword>llt</keyword>
      <keyword>lnblnk</keyword>
      <keyword>loc</keyword>
      <keyword>log</keyword>
      <keyword>log10</keyword>
      <keyword>log_gamma</keyword>
      <!-- <keyword>logical</keyword> -->
      <keyword>long</keyword>
      <keyword>lshift</keyword>
      <keyword>lstat</keyword>
      <keyword>ltime</keyword>
      <keyword>malloc</keyword>
      <keyword>maskl</keyword>
      <keyword>maskr</keyword>
      <keyword>matmul</keyword>
      <keyword>max</keyword>
      <keyword>maxexponent</keyword>
      <keyword>maxloc</keyword>
      <keyword>maxval</keyword>
      <keyword>mclock</keyword>
      <keyword>mclock8</keyword>
      <keyword>merge</keyword>
      <keyword>merge_bits</keyword>
      <keyword>min</keyword>
      <keyword>minexponent</keyword>
      <keyword>minloc</keyword>
      <keyword>minval</keyword>
      <keyword>mod</keyword>
      <keyword>modulo</keyword>
      <keyword>move_alloc</keyword>
      <keyword>mvbits</keyword>
      <keyword>nearest</keyword>
      <keyword>new_line</keyword>
      <keyword>nint</keyword>
      <keyword>norm2</keyword>
      <keyword>not</keyword>
      <keyword>null</keyword>
      <keyword>num_images</keyword>
      <keyword>or</keyword>
      <keyword>pack</keyword>
      <keyword>parity</keyword>
      <keyword>perror</keyword>
      <keyword>popcnt</keyword>
      <keyword>poppar</keyword>
      <keyword>precision</keyword>
      <keyword>present</keyword>
      <keyword>product</keyword>
      <keyword>radix</keyword>
      <keyword>ran</keyword>
      <keyword>rand</keyword>
      <keyword>random_init</keyword>
      <keyword>random_number</keyword>
      <keyword>random_seed</keyword>
      <keyword>range</keyword>
      <keyword>rank </keyword>
      <!-- <keyword>real</keyword> -->
      <keyword>re name</keyword>
      <keyword>repeat</keyword>
      <keyword>reshape</keyword>
      <keyword>rrspacing</keyword>
      <keyword>rshift</keyword>
      <keyword>same_type_as</keyword>
      <keyword>scale</keyword>
      <keyword>scan</keyword>
      <keyword>secnds</keyword>
      <keyword>second</keyword>
      <keyword>selected_char_kind</keyword>
      <keyword>selected_int_kind</keyword>
      <keyword>selected_real_kind</keyword>
      <keyword>set_exponent</keyword>
      <keyword>shape</keyword>
      <keyword>shifta</keyword>
      <keyword>shiftl</keyword>
      <keyword>shiftr</keyword>
      <keyword>sign</keyword>
      <keyword>signal</keyword>
      <keyword>sin</keyword>
      <keyword>sind</keyword>
      <keyword>sinh</keyword>
      <keyword>size</keyword>
      <keyword>sizeof</keyword>
      <keyword>sleep</keyword>
      <keyword>spacing</keyword>
      <keyword>spread</keyword>
      <keyword>sqrt</keyword>
      <keyword>srand</keyword>
      <keyword>stat</keyword>
      <keyword>storage_size</keyword>
      <keyword>sum</keyword>
      <keyword>symlnk</keyword>
      <keyword>system</keyword>
      <keyword>system_clock</keyword>
      <keyword>tan</keyword>
      <keyword>tand</keyword>
      <keyword>tanh</keyword>
      <keyword>this_image</keyword>
      <keyword>time</keyword>
      <keyword>time8</keyword>
      <keyword>tiny</keyword>
      <keyword>trailz</keyword>
      <keyword>transfer</keyword>
      <keyword>transpose</keyword>
      <keyword>trim</keyword>
      <keyword>ttynam</keyword>
      <keyword>ubound</keyword>
      <keyword>ucobound</keyword>
      <keyword>umask</keyword>
      <keyword>unlink</keyword>
      <keyword>unpack</keyword>
      <keyword>verify</keyword>
      <keyword>xor</keyword>
    </context>

    <context id="scope" style-ref="scope">
      <keyword>program</keyword>
      <keyword>end program</keyword>
      <keyword>module</keyword>
      <keyword>end module</keyword>
      <keyword>submodule</keyword>
      <keyword>end submodule</keyword>
      <keyword>block</keyword>
      <keyword>end block</keyword>
      <keyword>interface</keyword>
      <keyword>end interface</keyword>
      <keyword>type</keyword>
      <keyword>end type</keyword>
      <keyword>contains</keyword>
      <keyword>enum</keyword>
      <keyword>end enum</keyword>
      <keyword>critical</keyword>
      <keyword>end critical</keyword>
    </context>

    <context id="identifier-group">
      <include>
        <context ref="identifier"/>
        <context ref="function"/>
        <context ref="builtin"/>
        <context ref="scope"/>
      </include>
    </context>

    <!-- Others -->
    <context id="preprocessor" style-ref="preprocessor">
      <match>\#:</match>
    </context>

    <context id="preprocessor-inline" style-ref="preprocessor-inline">
      <match>\$\{|\}\$</match>
    </context>

    <context id="others">
      <include>
        <context ref="preprocessor"/>
        <context ref="preprocessor-inline"/>
      </include>
    </context>

    <!-- Modern Fortran -->
    <context id="fortran" class="no-spell-check">
      <include>
        <context ref="comment-group"/>
        <context ref="constant-group"/>
        <context ref="identifier-group"/>
        <context ref="statement-group"/>
        <context ref="type-group"/>
        <context ref="others"/>
      </include>
    </context>
  </definitions>
</language>
